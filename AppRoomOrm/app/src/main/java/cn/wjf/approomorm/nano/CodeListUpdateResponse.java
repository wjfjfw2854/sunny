// Generated by the protocol buffer compiler.  DO NOT EDIT!

package cn.wjf.approomorm.nano;

@SuppressWarnings("hiding")
public interface CodeListUpdateResponse {

  public static final class CodeListUpdate_Response extends
      com.google.protobuf.nano.MessageNano {

    public static final class CodeList extends
        com.google.protobuf.nano.MessageNano {

      private static volatile CodeList[] _emptyArray;
      public static CodeList[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new CodeList[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional uint32 stock_code = 1;
      private int stockCode_;
      public int getStockCode() {
        return stockCode_;
      }
      public CodeList setStockCode(int value) {
        stockCode_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasStockCode() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public CodeList clearStockCode() {
        stockCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional string stock_name = 2;
      private String stockName_;
      public String getStockName() {
        return stockName_;
      }
      public CodeList setStockName(String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        stockName_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasStockName() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public CodeList clearStockName() {
        stockName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional string code_name = 3;
      private String codeName_;
      public String getCodeName() {
        return codeName_;
      }
      public CodeList setCodeName(String value) {
        if (value == null) {
          throw new NullPointerException();
        }
        codeName_ = value;
        bitField0_ |= 0x00000004;
        return this;
      }
      public boolean hasCodeName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      public CodeList clearCodeName() {
        codeName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // optional sint32 flag = 4;
      private int flag_;
      public int getFlag() {
        return flag_;
      }
      public CodeList setFlag(int value) {
        flag_ = value;
        bitField0_ |= 0x00000008;
        return this;
      }
      public boolean hasFlag() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      public CodeList clearFlag() {
        flag_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional uint32 exchange = 5;
      private int exchange_;
      public int getExchange() {
        return exchange_;
      }
      public CodeList setExchange(int value) {
        exchange_ = value;
        bitField0_ |= 0x00000010;
        return this;
      }
      public boolean hasExchange() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      public CodeList clearExchange() {
        exchange_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // optional uint64 category = 6;
      private long category_;
      public long getCategory() {
        return category_;
      }
      public CodeList setCategory(long value) {
        category_ = value;
        bitField0_ |= 0x00000020;
        return this;
      }
      public boolean hasCategory() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      public CodeList clearCategory() {
        category_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      // optional uint32 trade_session = 7;
      private int tradeSession_;
      public int getTradeSession() {
        return tradeSession_;
      }
      public CodeList setTradeSession(int value) {
        tradeSession_ = value;
        bitField0_ |= 0x00000040;
        return this;
      }
      public boolean hasTradeSession() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      public CodeList clearTradeSession() {
        tradeSession_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      // optional uint32 version = 8;
      private int version_;
      public int getVersion() {
        return version_;
      }
      public CodeList setVersion(int value) {
        version_ = value;
        bitField0_ |= 0x00000080;
        return this;
      }
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      public CodeList clearVersion() {
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public CodeList() {
        clear();
      }

      public CodeList clear() {
        bitField0_ = 0;
        stockCode_ = 0;
        stockName_ = "";
        codeName_ = "";
        flag_ = 0;
        exchange_ = 0;
        category_ = 0L;
        tradeSession_ = 0;
        version_ = 0;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(1, stockCode_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeString(2, stockName_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeString(3, codeName_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeSInt32(4, flag_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeUInt32(5, exchange_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeUInt64(6, category_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          output.writeUInt32(7, tradeSession_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          output.writeUInt32(8, version_);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt32Size(1, stockCode_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(2, stockName_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(3, codeName_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeSInt32Size(4, flag_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt32Size(5, exchange_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt64Size(6, category_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt32Size(7, tradeSession_);
        }
        if (((bitField0_ & 0x00000080) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt32Size(8, version_);
        }
        return size;
      }

      @Override
      public CodeList mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              stockCode_ = input.readUInt32();
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              stockName_ = input.readString();
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              codeName_ = input.readString();
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              flag_ = input.readSInt32();
              bitField0_ |= 0x00000008;
              break;
            }
            case 40: {
              exchange_ = input.readUInt32();
              bitField0_ |= 0x00000010;
              break;
            }
            case 48: {
              category_ = input.readUInt64();
              bitField0_ |= 0x00000020;
              break;
            }
            case 56: {
              tradeSession_ = input.readUInt32();
              bitField0_ |= 0x00000040;
              break;
            }
            case 64: {
              version_ = input.readUInt32();
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      }

      public static CodeList parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new CodeList(), data);
      }

      public static CodeList parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new CodeList().mergeFrom(input);
      }
    }

    private static volatile CodeListUpdate_Response[] _emptyArray;
    public static CodeListUpdate_Response[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new CodeListUpdate_Response[0];
          }
        }
      }
      return _emptyArray;
    }

    private int bitField0_;

    // repeated .CodeListUpdate_Response.CodeList update_list = 1;
    public CodeList[] updateList;

    // optional uint32 final_version = 2;
    private int finalVersion_;
    public int getFinalVersion() {
      return finalVersion_;
    }
    public CodeListUpdate_Response setFinalVersion(int value) {
      finalVersion_ = value;
      bitField0_ |= 0x00000001;
      return this;
    }
    public boolean hasFinalVersion() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    public CodeListUpdate_Response clearFinalVersion() {
      finalVersion_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    // optional uint32 remain_size = 3;
    private int remainSize_;
    public int getRemainSize() {
      return remainSize_;
    }
    public CodeListUpdate_Response setRemainSize(int value) {
      remainSize_ = value;
      bitField0_ |= 0x00000002;
      return this;
    }
    public boolean hasRemainSize() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    public CodeListUpdate_Response clearRemainSize() {
      remainSize_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    public CodeListUpdate_Response() {
      clear();
    }

    public CodeListUpdate_Response clear() {
      bitField0_ = 0;
      updateList = CodeList.emptyArray();
      finalVersion_ = 0;
      remainSize_ = 0;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.updateList != null && this.updateList.length > 0) {
        for (int i = 0; i < this.updateList.length; i++) {
          CodeList element = this.updateList[i];
          if (element != null) {
            output.writeMessage(1, element);
          }
        }
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(2, finalVersion_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(3, remainSize_);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.updateList != null && this.updateList.length > 0) {
        for (int i = 0; i < this.updateList.length; i++) {
          CodeList element = this.updateList[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(1, element);
          }
        }
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(2, finalVersion_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(3, remainSize_);
      }
      return size;
    }

    @Override
    public CodeListUpdate_Response mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 10);
            int i = this.updateList == null ? 0 : this.updateList.length;
            CodeList[] newArray =
                new CodeList[i + arrayLength];
            if (i != 0) {
              System.arraycopy(this.updateList, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new CodeList();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new CodeList();
            input.readMessage(newArray[i]);
            this.updateList = newArray;
            break;
          }
          case 16: {
            finalVersion_ = input.readUInt32();
            bitField0_ |= 0x00000001;
            break;
          }
          case 24: {
            remainSize_ = input.readUInt32();
            bitField0_ |= 0x00000002;
            break;
          }
        }
      }
    }

    public static CodeListUpdate_Response parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new CodeListUpdate_Response(), data);
    }

    public static CodeListUpdate_Response parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new CodeListUpdate_Response().mergeFrom(input);
    }
  }
}
